# 3.1 POST /api/v1/mapping/start/{projectId}/{schmaid}
# Purpose: Start semantic mapping process for a specific project.
# Input Parameters: projectId (string, in URL) - The unique identifier of the project.
# Output:
# status (string) - The status of the process initiation, either "started" or "error".
# message (string) - The detailed message of the operation.
# Error Handling:
# 404 Not Found if an invalid projectId is provided.
# 500 Internal Server Error if there is a server-side error or mapping issues when starting the process.
# 3.2 GET /api/v1/mapping/{projectId}/{schmaid}
# Purpose: Retrieve current semantic mapping for a specific project.
# Input Parameters: projectId (string, in URL) - The unique identifier of the project.
# Output: semanticMapping (object) - The current semantic mapping, including a set of rules or correspondences between the elements of the schema(s) and the elements of the schema.org ontology. Needs to include information about whether a mapping was auto-generated, the certainty of the mapping, and the reasoning behind the mapping.
# [To be defined whether we want to split the output rather than returning a single object]
# Semantimappings (array of objects) - Each object represents a mapping and includes:
# originalSchemaElement (string)
# targetSchemaElement (string)
# ontologyId (string)
# isAutoGenerated (boolean)
# certaintyLevel (string enum ["high", "medium", "low"])
# mappingReason (string)





# Error Handling:
# 404 Not Found if an invalid projectId is provided.
# 500 Internal Server Error if there is a server-side error when retrieving the mapping.

# 3.3 PUT /api/v1/mapping/{projectId}
# Purpose: Update semantic mapping for a specific project.
# Input Parameters:
# projectId (string, in URL) - The unique identifier of the project.
# newMappingState (object) - The new mapping state, including a set of rules or correspondences between the elements of the schema(s) and the elements of the schema.org ontology.
# Output:
# status (string) - The status of the update operation, either "success" or "error".
# message (string) - The detailed message of the operation.
# Error Handling:
# 400 Bad Request if inconsistent or incorrect mapping state is provided.
# 404 Not Found if an invalid projectId is provided.
# 500 Internal Server Error if there is a server-side error when updating the mapping.


# 3.4 GET /api/v1/mapping/view/{projectId}
# Purpose: Retrieve the current state of mappings for a specific project.
# Input Parameters:
# projectId (string, in URL) - The unique identifier of the project.
# Output:
# mappings (array of objects) - Each object represents a mapping and includes the original schema element, the target schema.org element, the auto-generated status, the curated status, the certainty level, and the reasoning behind the mapping.
# Error Handling:
# 404 Not Found if an invalid projectId is provided.
# 500 Internal Server Error if there is a server-side error when retrieving the mappings.

# 3.5 PUT /api/v1/mapping/edit/{projectId}
# Purpose: Update a mapping for a specific project (by the user).
# Input Parameters:
# projectId (string, in URL) - The unique identifier of the project.
# mappingId (string, in the body) - The unique identifier of the mapping to be updated.
# updatedMapping (object, in the body) - The updated mapping details, including the target schema.org element (if changed), the curated status (if changed), the certainty level (if changed), and the reasoning (if changed).
# Output:
# status (string) - The status of the update operation, either "success" or "error".
# message (string) - The detailed message of the operation.
# Error Handling:
# 400 Bad Request if inconsistent or incorrect mapping details are provided.
# 404 Not Found if an invalid projectId or mappingId is provided.
# 500 Internal Server Error if there is a server-side error when updating the mapping.


# —- Consider whether this is needed (for SSE events at this stage)—-
# 3.6 GET /api/v1/mapping/updates/{projectId}

# ### Server-Sent Events (SSE) For real-time updates from the server, we will use Server-Sent Events (SSE). Endpoint: `/mapping/updates` This endpoint will allow the client to subscribe to events related to the mapping process. The server will push updates to this endpoint as events occur. On the client side, an `EventSource` object will be used to open a connection to this server endpoint and listen for updates. This will enable a smoother, more responsive user experience, as users will receive updates without needing to manually refresh or poll the server. Please note that this is a one-way communication channel from the server to the client. 

# Purpose: Subscribe to real-time updates for a specific project's semantic mapping.
# Input Parameters: projectId (string, in URL) - The unique identifier of the project.
# Output: Server-Sent Events with the following data:
#     mappingUpdate (object) - The most recent update to the semantic mapping. Includes the same information as in the /api/v1/mapping/{projectId} endpoint.
# Error Handling:
#     404 Not Found if an invalid projectId is provided.
#     500 Internal Server Error if there is a server-side error when setting up the event stream.







from fastapi import APIRouter, HTTPException, Depends,File


router = APIRouter


router.post("/mapping/start/{projectId}/{schmaid}", tags=["Semantic Mapping APIs"])
async def start_semantic_mapping(projectId: str, schmaid: str):
    try:
        # start semantic mapping and return the status
        return {"status": "started", "message": "Semantic mapping started successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    

router.get("/mapping/{projectId}/{schmaid}", tags=["Semantic Mapping APIs"])
async def get_semantic_mapping(projectId: str, schmaid: str):
    try:
        # get semantic mapping and return the status
        return {"status": "success", "message": "Semantic mapping retrieved successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    

router.put("/mapping/{projectId}", tags=["Semantic Mapping APIs"])
async def update_semantic_mapping(projectId: str, newMappingState: dict):
    try:
        # update semantic mapping and return the status
        return {"status": "success", "message": "Semantic mapping updated successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    

router.get("/mapping/view/{projectId}", tags=["Semantic Mapping APIs"])
async def view_semantic_mapping(projectId: str):
    try:
        # view semantic mapping and return the status
        return {"status": "success", "message": "Semantic mapping viewed successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    

router.put("/mapping/edit/{projectId}", tags=["Semantic Mapping APIs"])
async def edit_semantic_mapping(projectId: str, mappingId: str, updatedMapping: dict):
    try:
        # edit semantic mapping and return the status
        return {"status": "success", "message": "Semantic mapping edited successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
